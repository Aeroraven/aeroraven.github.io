<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>A Clumsy Attempt to Run Self-Supervised 3D Tasks</title>
    <link href="/2021/10/01/self-supervised-3d-obstacles-and-solutions/"/>
    <url>/2021/10/01/self-supervised-3d-obstacles-and-solutions/</url>
    
    <content type="html"><![CDATA[<h2 id="Before-Running"><a href="#Before-Running" class="headerlink" title="Before Running"></a>Before Running</h2><p> <strong>ImportError: cannot import name ‘parse_single_example_v2_unoptimized’ from ‘tensorflow.python.ops.parsing_ops’</strong> </p><p>This problem occurs due to the version mismatch between <code>tensorflow</code> and <code>tensorflow-gpu</code>. Reinstalling <code>tensorflow-gpu</code> will eliminate the problem.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip3 uninstall tensorflow-gpu<br>pip3 install tensorflow-gpu==2.1.0<br></code></pre></td></tr></table></figure><p><strong>ValueError: Cannot load file containing pickled data when allow_pickle=False</strong> (numpy_3d_loader.py Line22)</p><p>After print the local variable <code>path_to_image</code>, we can find that the program perceives files with prefix <code>._</code> as image files. To deal with the problem, delete these redundant files created by Mac OS.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">del</span> /f /s /q *DS_Store*<br><span class="hljs-built_in">del</span> /f /s /q *._*<br></code></pre></td></tr></table></figure><p>The problem exists after the modification above. The another reason is the compatibility problem between Nifti Image and NumPy Image. To solve the problem, we need implement an Nifti image loader. Normally, a data item in 3D dataset consist 4-dimension data (X, Y, Z, Channel). Several datasets in the Medical Decathlon consist 3-dimension tensors, lacking the channel dimension. Thus, an additional dimension is required to add to the tensors. The second problem we should handle is the inconsistency of data shapes. Therefore, we need to use <code>skimage</code> to regularize their sizes before feeding the data into the data generator.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">nifti_load</span>(<span class="hljs-params">path, padding_channel=<span class="hljs-literal">False</span>, do_cubic_resize=<span class="hljs-literal">False</span></span>):</span><br>    data = nib.load(path).get_fdata()<br>    <span class="hljs-keyword">if</span> do_cubic_resize:<br>        data = transform.resize(data, (<span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>))<br>        data = np.asarray(data)<br>    <span class="hljs-keyword">if</span> padding_channel:<br>        data = np.expand_dims(data, <span class="hljs-built_in">len</span>(data.shape))<br>    <span class="hljs-keyword">return</span> data<br></code></pre></td></tr></table></figure><p>This problem is tricky and exhausting. The issue in the original repository helped me.</p><p><a href="https://github.com/HealthML/self-supervised-3d-tasks/issues/15">https://github.com/HealthML/self-supervised-3d-tasks/issues/15</a></p><p><strong>Insufficient GPU Memory</strong></p><p>This problem can be solved by decreasing the filter and batch size. However, This also decreases the quality of training results.</p><h2 id="Running-on-the-Server"><a href="#Running-on-the-Server" class="headerlink" title="Running on the Server"></a>Running on the Server</h2><p><strong>Before transferring the code to the server</strong></p><p>Inspect paths starting with <code>~</code>, which ensures that all workspace data will be stored in the corresponding directory.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~<br>mkdir workspace<br></code></pre></td></tr></table></figure><p>Then install TensorFlow 2.1.0 in the user directory.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install --user -i https://pypi.tuna.tsinghua.edu.cn/simple tensorflow==2.1.0<br>pip install --user -i https://pypi.tuna.tsinghua.edu.cn/simple tensorflow-gpu==2.1.0<br></code></pre></td></tr></table></figure><p>Execute the command and Tensorflow returned a tensor. The installation completed.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python3 -c <span class="hljs-string">&quot;import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))&quot;</span><br></code></pre></td></tr></table></figure><p>Finally, use <code>scp</code> command to upload source codes.</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>

(()=>{"use strict";class e{static log(e){}}class t{constructor(e){this.gl=e}loadShader(e,t){const n=this.gl.createShader(e);return this.gl.shaderSource(n,t),this.gl.compileShader(n),this.gl.getShaderParameter(n,this.gl.COMPILE_STATUS)?n:(console.log("[CGProject] Failed To Compile Shader"),console.log(this.gl.getShaderInfoLog(n)),this.gl.deleteShader(n),null)}initShaderProgram(t,n){e.log("Compiling Vertex Shader");const r=this.loadShader(this.gl.VERTEX_SHADER,t);e.log("Compiling Fragment Shader");const i=this.loadShader(this.gl.FRAGMENT_SHADER,n),a=this.gl.createProgram();return this.gl.attachShader(a,r),this.gl.attachShader(a,i),this.gl.linkProgram(a),this.gl.getProgramParameter(a,this.gl.LINK_STATUS)?(console.log("[CGProject] Shader created"),a):(console.log("[CGProject] Failed to initialize the shader"),console.log(this.gl.getProgramInfoLog(a)),null)}}class n{constructor(e){this.gl=e,this.vertexShader="",this.fragmentShader=""}getVertexShader(){}getFragmentShader(){}getShaderProgramEx(e,n){let r=new t(this.gl);return console.log(e),console.log(n),r.initShaderProgram(e,n)}}class r{constructor(e,t,n){this.pt=e,this.cl=t,this.tx=null==n?[0,0]:n}}var i=1e-6,a="undefined"!=typeof Float32Array?Float32Array:Array;function s(){var e=new a(3);return a!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)}),s();class o{constructor(e,t,n){this.x=e,this.y=t,this.z=n}add(e){return new o(this.x+e.x,this.y+e.y,this.z+e.z)}dot(e){return new o(this.x*e.x,this.y*e.y,this.z*e.z)}cross(e){return new o(y*e.z-z*e.y,-x*e.z+z*e.x,x*e.y-y*e.x)}neg(){return new o(-this.x,-this.y,-this.z)}set(e,t,n){this.x=e,this.y=t,this.z=n}getGLMatVec3(){let e=s();return e[0]=this.x,e[1]=this.y,e[2]=this.z,e}dist(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}norm(){let e=this.dist();return new o(this.x/e,this.y/e,this.z/e)}magnify(e){return new o(this.x*e,this.y*e,this.z*e)}}class c{constructor(){this.light=new o(1,1,1)}setLight(e){this.light=e}}class l{constructor(e){this.gl=e,this.fb=e.createFramebuffer(),this.depBuf=e.createRenderbuffer(),this.depth=!1}bindTexture(e,t,n){let r=this.gl;r.bindFramebuffer(r.FRAMEBUFFER,this.fb),r.bindTexture(r.TEXTURE_2D,t.getTexture()),r.framebufferTexture2D(r.FRAMEBUFFER,e,r.TEXTURE_2D,t.getTexture(),t,0),this.depth=n,n&&(r.bindRenderbuffer(r.RENDERBUFFER,this.depBuf),r.renderbufferStorage(r.RENDERBUFFER,r.DEPTH_COMPONENT16,t.getW(),t.getH()),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.RENDERBUFFER,this.depBuf)),r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null)}bindTexturePingPong(e,t,n){let r=this.gl;r.bindFramebuffer(r.FRAMEBUFFER,this.fb),r.bindTexture(r.TEXTURE_2D,t.getTexture()),r.framebufferTexture2D(r.FRAMEBUFFER,e,r.TEXTURE_2D,n.getTexture(),0),r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null)}start(){this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this.fb)}end(){this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null)}}function h(){var e=new a(4);return a!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0,e[3]=0),e}h();class u{constructor(e,t,n,r){this.r=e,this.g=t,this.b=n,this.a=r}getGLMatVec4(){let e=h();return e[0]=this.r,e[1]=this.g,e[2]=this.b,e[3]=this.a,e}}function f(){var e=new a(16);return a!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}var m=function(e,t,n){var r=t[0],i=t[1],a=t[2],s=t[3],o=t[4],c=t[5],l=t[6],h=t[7],u=t[8],f=t[9],m=t[10],d=t[11],g=t[12],p=t[13],v=t[14],x=t[15],w=n[0],y=n[1],R=n[2],_=n[3];return e[0]=w*r+y*o+R*u+_*g,e[1]=w*i+y*c+R*f+_*p,e[2]=w*a+y*l+R*m+_*v,e[3]=w*s+y*h+R*d+_*x,w=n[4],y=n[5],R=n[6],_=n[7],e[4]=w*r+y*o+R*u+_*g,e[5]=w*i+y*c+R*f+_*p,e[6]=w*a+y*l+R*m+_*v,e[7]=w*s+y*h+R*d+_*x,w=n[8],y=n[9],R=n[10],_=n[11],e[8]=w*r+y*o+R*u+_*g,e[9]=w*i+y*c+R*f+_*p,e[10]=w*a+y*l+R*m+_*v,e[11]=w*s+y*h+R*d+_*x,w=n[12],y=n[13],R=n[14],_=n[15],e[12]=w*r+y*o+R*u+_*g,e[13]=w*i+y*c+R*f+_*p,e[14]=w*a+y*l+R*m+_*v,e[15]=w*s+y*h+R*d+_*x,e};class d{constructor(){this.projectionMat=f(),this.modelViewMat=f(),this.camPositon=new o(0,0,0),this.camCenter=new o(0,0,0),this.camUp=new o(0,0,0),window.r=this.modelViewMat}setPerspective(e,t,n,r){!function(e,t,n,r,i){var a,s=1/Math.tan(t/2);e[0]=s/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=i&&i!==1/0?(a=1/(r-i),e[10]=(i+r)*a,e[14]=2*i*r*a):(e[10]=-1,e[14]=-2*r)}(this.projectionMat,e,t,n,r)}setOrtho(e,t,n,r,i,a){!function(e,t,n,r,i,a,s){var o=1/(t-n),c=1/(r-i),l=1/(a-s);e[0]=-2*o,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*c,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*l,e[11]=0,e[12]=(t+n)*o,e[13]=(i+r)*c,e[14]=(s+a)*l,e[15]=1}(this.projectionMat,e,t,r,n,i,a)}setCamPosition(e){this.camPositon=e}setCamCenter(e){this.camCenter=e}setCamUp(e){this.camUp=e}translate(e){this.camCenter.add(e),this.camPositon.add(e)}generate(){var e,t,n,r,a,s,o,c,l,h,u,f,m,d,g,p,v,x,w,y,R,_,T;e=this.modelViewMat,t=this.camPositon.getGLMatVec3(),n=this.camCenter.getGLMatVec3(),r=this.camUp.getGLMatVec3(),g=t[0],p=t[1],v=t[2],x=r[0],w=r[1],y=r[2],R=n[0],_=n[1],T=n[2],Math.abs(g-R)<i&&Math.abs(p-_)<i&&Math.abs(v-T)<i?function(e){e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1}(e):(u=g-R,f=p-_,m=v-T,a=w*(m*=d=1/Math.hypot(u,f,m))-y*(f*=d),s=y*(u*=d)-x*m,o=x*f-w*u,(d=Math.hypot(a,s,o))?(a*=d=1/d,s*=d,o*=d):(a=0,s=0,o=0),c=f*o-m*s,l=m*a-u*o,h=u*s-f*a,(d=Math.hypot(c,l,h))?(c*=d=1/d,l*=d,h*=d):(c=0,l=0,h=0),e[0]=a,e[1]=c,e[2]=u,e[3]=0,e[4]=s,e[5]=l,e[6]=f,e[7]=0,e[8]=o,e[9]=h,e[10]=m,e[11]=0,e[12]=-(a*g+s*p+o*v),e[13]=-(c*g+l*p+h*v),e[14]=-(u*g+f*p+m*v),e[15]=1),window.x=this.modelViewMat,window.w=this.camPositon}getMatrix(){return this.generate(),{proj:this.projectionMat,view:this.modelViewMat}}}class g{constructor(e,t,n,r){this.w=t,this.h=n,this.gl=e,this.tex=e.createTexture(),e.bindTexture(e.TEXTURE_2D,this.tex),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,this.w,this.h,0,e.RGBA,e.UNSIGNED_BYTE,r),e.bindTexture(e.TEXTURE_2D,null)}disableMips(){let e=this.gl;e.bindTexture(e.TEXTURE_2D,this.tex),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!0),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.generateMipmap(e.TEXTURE_2D),e.bindTexture(e.TEXTURE_2D,null)}getTexture(){return this.tex}start(){this.gl.bindTexture(this.gl.TEXTURE_2D,this.tex)}end(){this.gl.bindTexture(this.gl.TEXTURE_2D,null)}getW(){return this.w}getH(){return this.h}updateTexture(e){window.i=e;let t=this.gl;t.bindTexture(t.TEXTURE_2D,this.tex),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e),t.bindTexture(t.TEXTURE_2D,null)}loadImageAsync(e){const t=new Image,n=this;t.onload=function(){n.updateTexture(t)},t.src=e}}class p{constructor(){this.hashmap={}}insert(e,t,n,r=null){this.hashmap[e]={},this.hashmap[e].type=n,this.hashmap[e].initValue=t,this.hashmap[e].name=e,this.hashmap[e].ext=r}clear(){this.hashmap={}}getSourceFragment(){let e="";for(let t in this.hashmap){let n=this.hashmap[t];e+="uniform ",e+=n.type,e+=n.name,e+=";\n"}return e}bindShaderVarible(t,n){for(let r in this.hashmap){let i=this.hashmap[r],a=t.getUniformLocation(n,i.name);e.log("Binding uniform variable:"+r+"( "+i.type+")"),e.log(i.initValue),i.type==p.MAT4&&t.uniformMatrix4fv(a,!1,i.initValue),i.type==p.VEC3&&t.uniform3fv(a,i.initValue),i.type==p.VEC4&&t.uniform4fv(a,i.initValue),i.type==p.VEC2&&t.uniform2fv(a,i.initValue),i.type==p.INT&&t.uniform1i(a,i.initValue),i.type==p.FLOAT&&t.uniform1f(a,i.initValue),i.type==p.SAMPLER2D&&(0==i.initValue&&t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,i.ext),t.uniform1i(a,i.initValue))}}}p.MAT4="mat4 ",p.VEC3="vec3 ",p.VEC4="vec4 ",p.VEC2="vec2 ",p.INT="int ",p.BOOL="bool ",p.FLOAT="float ",p.SAMPLER2D="sampler2D ";class v{constructor(e,t){this.cl=new u(1,1,1,1),this.name="RTAmbientLight"+t,null!=e&&(this.cl=e)}updateMap(e){e.insert(this.name+"_CL",this.cl.getGLMatVec4(),p.VEC4)}genCode(){return"\n        ambient = vec4("+this.name+"_CL);\n        "}}class w{constructor(e,t){this.cl=new u(1,1,1,1),this.name="RTSkyLight"+t,null!=e&&(this.cl=e)}updateMap(e){e.insert(this.name+"_CL",this.cl.getGLMatVec4(),p.VEC4)}genCode(){return"\n        skylight = vec4("+this.name+"_CL);\n        "}}class R{constructor(e){this.cam=new d,this.cam.setPerspective(55*Math.PI/180,e.canvas.height/e.canvas.width,-5,100),this.cam.setCamPosition(new o(0,0,-3)),this.cam.setCamUp(new o(0,1,0)),this.cam.setCamCenter(new o(0,0,0)),this.screenPos=new o(0,0,0),this.dist=3}getCameraMatrix(){let e=f();return m(e,this.cam.getMatrix().proj,this.cam.getMatrix().view),e}getEye(){return this.screenPos}getRay(e,t,n=0){let r=new o(e,t,n),i=f();var a,s,c,l;a=i,s=r.x,c=r.y,l=r.z,a[0]=s,a[1]=0,a[2]=0,a[3]=0,a[4]=c,a[5]=0,a[6]=0,a[7]=0,a[8]=l,a[9]=0,a[10]=0,a[11]=0,a[12]=1,a[13]=0,a[14]=0,a[15]=0;let h=f();return m(h,this.getCameraMatrix(),i),new o(h[0]/h[12],h[4]/h[12],h[8]/h[12]).add(this.getEye().neg()).getGLMatVec3()}prepareShaderMap(e){e.insert("raylt",this.getRay(-1,1,this.dist+this.screenPos.z),p.VEC3),e.insert("raylb",this.getRay(-1,-1,this.dist+this.screenPos.z),p.VEC3),e.insert("rayrb",this.getRay(1,-1,this.dist+this.screenPos.z),p.VEC3),e.insert("rayrt",this.getRay(1,1,this.dist+this.screenPos.z),p.VEC3),e.insert("eye",this.getEye().getGLMatVec3(),p.VEC3)}}class _ extends n{constructor(e){super(e),this.gl=e,this.vertexShader="  ",this.fragmentShader="  "}getFragShader(e){return this.fragmentShader=e.genFragmentShader(),this.fragmentShader}getVertexShader(){return this.vertexShader="#version 300 es\n        in vec4 aVertexPosition;\n        in vec4 aVertexColor;\n        in vec2 aVertexTex;\n\n        uniform mat4 uModelViewMatrix;\n        uniform mat4 uProjectionMatrix;\n        uniform vec3 raylb;\n        uniform vec3 raylt;\n        uniform vec3 rayrb;\n        uniform vec3 rayrt;\n\n        out highp vec3 ray;\n        out highp vec4 color;\n        out highp vec2 tex;\n        void main() {\n            float yp = aVertexPosition.y*0.5+0.5;\n            gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n            ray = mix(mix(raylb,raylt,yp),mix(rayrb,rayrt,yp),aVertexPosition.x*0.5+0.5);\n            color = aVertexColor;\n            tex = aVertexTex;\n        }\n        ",this.vertexShader}getFragShaderTest(e){return this.fragmentShader="precision highp float;\n            varying highp vec3 ray;\n            void main(){\n                gl_FragColor = vec4(color);\n            }\n        ",this.fragmentShader}getShaderProgram(e){return this.getShaderProgramEx(this.getVertexShader(),this.getFragShader(e))}getLocationsInfo(e){return this.getShaderProgram(e)}}class T{static structDef_Ray(){return"\n            struct sRay{\n                vec3 origin;\n                vec3 direction;\n                float inrefra;\n            };\n        "}static structDef_Plane(){return"\n            struct sPlane{\n                vec3 x,y,z;\n                vec4 emissionColor;\n                vec4 materialColor;\n                \n            };\n        "}static structDef_Sphere(){return"\n            struct sSphere{\n                vec3 c;\n                float r;\n                vec4 emissionColor;\n                vec4 materialColor;\n                \n            };\n        "}static structDef_RayCollisionResult(){return"\n            struct sRayCollisionResult{\n                vec3 colvex;\n                vec3 colnorm;\n                bool collided;\n                vec4 emissionColor;\n                vec4 materialColor;\n                int hitType;\n                float refra;\n            };\n        "}static structDefConcat(){let e=[T.structDef_Plane,T.structDef_Ray,T.structDef_Sphere,T.structDef_RayCollisionResult],t="";for(let n=0;n<e.length;n++)t+=e[n]();return t}static funcDef_RayPoint(){return"\n            vec3 fRayPoint(sRay ray,float t){\n                return  ray.origin+ t * ray.direction;\n            }\n        "}static funcDef_PlaneNorm(){return"\n            vec3 fPlaneNorm(sPlane p){\n                return cross(p.y-p.x,p.z-p.y);\n            }\n        "}static funcDef_RayPlaneIntersection(){return"\n            float fRayPlaneIntersection(sRay r,sPlane p){\n                vec3 n = fPlaneNorm(p);\n                vec3 di = r.direction;\n                vec3 or = r.origin;\n                vec3 a = p.y;\n                float rd = dot(n,di);\n                float rn = n.x*(a.x-or.x)+n.y*(a.y-or.y)+n.z*(a.z-or.z);\n                return rn/rd;\n            }\n        "}static funcDef_RaySphereIntersection(){return"\n            float fRaySphereIntersection(sRay r,sSphere s){\n                vec3 p = r.origin-s.c;\n                float a = dot(r.direction,r.direction);\n                float b = 2.0*(dot(r.direction,p));\n                float delta = b*b-4.0*a*(dot(p,p)-s.r*s.r);\n                if(delta<1e-10){\n                    return -1.0;\n                }else{\n                    float sdelta = sqrt(delta);\n                    float t1 = (-b+sdelta)/(2.0*a);\n                    float t2 = (-b-sdelta)/(2.0*a);\n                    if(t1>0.0&&t2>0.0){\n                        if(t1>t2){\n                            return t2;\n                        }\n                        return t1;\n                    }\n                    if(t1>0.0&&t2<0.0){\n                        return t1;\n                    }\n                    return t2;\n                }\n                return 0.0;\n            }\n        "}static funcDef_InsidePlane(){return"\n            bool fInsidePlane(sPlane p,vec3 v){\n                vec3 v1 = p.x - v;\n                vec3 v2 = p.y - v;\n                vec3 v3 = p.z - v;\n                float s1 = length(cross(v1,v2));\n                float s2 = length(cross(v2,v3));\n                float s3 = length(cross(v3,v1));\n                float s0 = length(cross(p.y-p.x,p.z-p.x));\n                if(abs(abs(s0)-abs(s1)-abs(s2)-abs(s3))<1e-5){\n                    return true;\n                }\n                return false;\n            }\n        "}static funcDef_SpecularReflection(){return"\n            sRay fSpecularReflection(sRay inr,vec3 p,vec3 n){\n                if(dot(inr.direction,n)>0.0){\n                    n = -n;\n                }\n                vec3 ox = inr.direction/dot(inr.direction,n)+2.0*n;\n                sRay ret = sRay(p,ox/length(ox),inr.inrefra);\n                return ret;\n            }\n        "}static funcDef_tellRefract(){return"\n            bool judgeRefract(sRay inr,vec3 p,vec3 N,float NiOverNt){\n                vec3 UV= inr.direction/length(inr.direction);\n                float Dt=dot(UV,N);\n                N = N/length(N);\n                float Discriminant=1.0-NiOverNt*NiOverNt*(1.0-Dt*Dt);\n                if(Discriminant>0.0){\n                    return true;\n                }\n                else\n                  return false;\n            }\n        "}static funcDef_calRefract(){return"\n            sRay calRefract(sRay inr,vec3 p,vec3 N,float matfra){\n                vec3 UV= inr.direction/length(inr.direction);\n                vec3 normvec = N/length(N);\n                vec3 fnormvec = normvec;\n                float Dt=dot(UV,normvec);\n                float colfra=0.0;\n                if(Dt<0.0){\n                    colfra = 1.0/matfra;\n                    fnormvec=normvec;\n                }else{\n                    colfra = matfra;\n                    fnormvec=-fnormvec;\n                }\n                float Discriminant=colfra*colfra*(1.0-Dt*Dt);\n                vec3 rfm = UV+fnormvec*abs(Dt);\n                float cos2 = sqrt(1.0-Discriminant);\n                float sin2 = sqrt(Discriminant);\n                float cos1 = abs(Dt);\n                float sin1 = sqrt(1.0-Dt*Dt);\n                vec3 rfn = rfm*(sin2/cos2*cos1/sin1)-fnormvec*abs(Dt);\n                \n                sRay addrefra=sRay(p, rfn, 1.0);\n                if(Dt>0.0){\n                    addrefra.inrefra = 1.0;\n                }else{\n                    addrefra.inrefra = matfra;\n                }\n                return addrefra;\n            }\n        "}static funcDef_Schlick(){return"\n            float calSchlick(cos,f0){\n                return f0+(1-f0)*(1-cos)*(1-cos)*(1-cos)*(1-cos)*(1-cos);\n            }\n        "}static funcDef_RandNoiseV3(){return"\n            float rng()\n            {\n                seeds += uvec2(1);\n                uvec2 q = 1103515245U * ( (seeds >> 1U) ^ (seeds.yx) );\n                uint  n = 1103515245U * ( (q.x) ^ (q.y >> 3U) );\n                return float(n) * (1.0 / float(0xffffffffU));\n            }\n            float rng2()\n            {\n                uvec2 seedss = uvec2(1);\n                uvec2 q = 1103515245U * ( (seedss >> 1U) ^ (seedss.yx) );\n                uint  n = 1103515245U * ( (q.x) ^ (q.y >> 3U) );\n                return float(n) * (1.0 / float(0xffffffffU));\n            }\n            vec3 uniformlyRandomDirectionNew() {\n                float up = rng() * 2.0 - 1.0; \n                float over = sqrt( max(0.0, 1.0 - up * up) );\n                float around = rng() * 6.28318530717;\n                return normalize(vec3(cos(around) * over, up, sin(around) * over));\t\n            }\n            float getOceanWaterHeightDetail( vec3 p )\n            {\n                mat2 OCTAVE_M  = mat2(1.6, 1.2, -1.2, 1.6);\n                p.x *= 2.2;\n                p.z *= 2.2;\n                float freq = 2.0;\n                float amp = 1.2;\n                float choppy = 4.0;\n                float sea_time = 2.0;\n                \n                vec2 uv = p.zx; uv.x *= 0.75;\n                float d, h = 0.0;    \n                for(int i = 0; i < 4; i++)\n                {        \n                    d =  sea_octave((uv + sea_time) * freq, choppy);\n                    d += sea_octave((uv - sea_time) * freq, choppy);\n                    h += d * amp;        \n                    uv *= OCTAVE_M; freq *= 1.9; amp *= 0.22;\n                    choppy = mix(choppy, 1.0, 0.2);\n                }\n                return h-0.5;\n            }\n            float getOceanWaterHeight( vec3 p )\n            {\n                mat2 OCTAVE_M  = mat2(1.6, 1.2, -1.2, 1.6);\n                p.x *= 1.0;\n                p.z *= 1.0;\n                float freq = 2.3;\n                float amp = 0.05;\n                float choppy = 2.0;\n                float sea_time = 2.0;\n                \n                vec2 uv = p.xz; uv.x *= 0.75;\n                float d, h = 0.0;\n\n                d =  sea_octave((uv + sea_time) * freq, choppy);\n                d += sea_octave((uv - sea_time) * freq, choppy);\n                h += d * amp;        \n                \n                return h-0.5;\n            }\n\n        "}static funcDef_transVec(){return"\n            vec2 transVec(vec3 invec) {\n                vec2 outvec=vec2(0.0,0.0);\n                outvec.x=1920.0*(atan(invec.x));\n                outvec.y=1080.0*(atan(invec.y));\n                return outvec;\n            }\n        "}static funcDef_fromEuler(){return"\n            mat3 fromEuler(vec3 ang) {\n                vec2 a1 = vec2(sin(ang.x),cos(ang.x));\n                vec2 a2 = vec2(sin(ang.y),cos(ang.y));\n                vec2 a3 = vec2(sin(ang.z),cos(ang.z));\n                mat3 m;\n                m[0] = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);\n                m[1] = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);\n                m[2] = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);\n                return m;\n            }\n        "}static funcDef_hash(){return"\n            float hash( vec2 p ) {\n                float h = dot(p,vec2(127.1,311.7));\t\n                return fract(sin(h)*43758.5453123);\n            }\n        "}static funcDef_noise(){return"\n            float noise( vec2 p ) {\n                vec2 i = floor( p );\n                vec2 f = fract( p );\t\n                vec2 u = f*f*(3.0-2.0*f);\n                return -1.0+2.0*mix( mix( hash( i + vec2(0.0,0.0) ), \n                        hash( i + vec2(1.0,0.0) ), u.x),\n                    mix( hash( i + vec2(0.0,1.0) ), \n                        hash( i + vec2(1.0,1.0) ), u.x), u.y);\n            }\n        "}static funcDef_diffuse(){return"\n            float diffuse( vec3 n,vec3 l,float p ) {\n                return pow(dot(n,l) * 0.4 + 0.6,p);\n            }\n        "}static funcDef_specular(){return"\n            float specular( vec3 n,vec3 l,vec3 e,float s ) {\n                float nrm = (s + 8.0) / (3.14 * 8.0);\n                return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;\n            }\n        "}static funcDef_getSkyColor(){return"\n            vec3 getSkyColor( vec3 e ) {\n                e.y = (max(e.y,0.0)*0.8+0.2)*0.8;\n                return vec3((1.0-e.y)*(1.0-e.y), 1.0-e.y, 0.6+(1.0-e.y)*0.4) * 1.1;\n            }\n        "}static funcDef_sea_octave(){return"\n            float sea_octave( vec2 uv, float choppy ) {\n                uv += noise(uv);        \n                vec2 wv = 1.0-abs(sin(uv));\n                vec2 swv = abs(cos(uv));    \n                wv = mix(wv,swv,wv);\n                return pow(1.0-pow(wv.x * wv.y,0.65),choppy);\n            }\n        "}static funcDef_map(){return"\n            float map( vec3 p ) {\n                float freq = 0.16;\n                float amp = 0.2;\n                float choppy = 4.0;\n                // float freq = SEA_FREQ;\n                // float amp = SEA_HEIGHT;\n                // float choppy = SEA_CHOPPY;\n                // const int ITER_GEOMETRY = 3;\n                // const int ITER_FRAGMENT = 5;\n                // const float SEA_HEIGHT = 0.6;\n                // const float SEA_CHOPPY = 4.0;\n                // const float SEA_SPEED = 0.8;\n                // const float SEA_FREQ = 0.16;\n\n                // const mat2 octave_m = mat2(1.6,1.2,-1.2,1.6);\n\n                // float SEA_TIME = iGlobalTime * 0.8 + 100000.0;\n\n                vec2 uv = p.xz; uv.x *= 0.75;\n                float d, h = 0.0;    \n                for(int i = 0; i < 3; i++) {        \n                    d = sea_octave((uv)*0.16,4.0);\n                    d += sea_octave((uv)*0.16,4.0);\n                    h += d * 0.6;        \n                    uv *= mat2(1.6,1.2,-1.2,1.6);\n                    freq *= 1.9; amp *= 0.22;\n                    choppy = mix(choppy,1.0,0.2);\n                }\n                return p.y - h;\n\n            }\n        "}static funcDef_map_detailed(){return"\n            float map_detailed( vec3 p ) {\n                float freq = 0.16;\n                float amp = 0.6;\n                float choppy = 4.0;\n\n                vec2 uv = p.xz; uv.x *= 0.75;\n                float d, h = 0.0;    \n                for(int i = 0; i < 3; i++) {        \n                    d = sea_octave((uv)*0.16,4.0);\n                    d += sea_octave((uv)*0.16,4.0);\n                    h += d * 0.6;        \n                    uv *= mat2(1.6,1.2,-1.2,1.6);\n                    freq *= 1.9; amp *= 0.22;\n                    choppy = mix(choppy,1.0,0.2);\n                }\n                return p.y - h;\n\n            }\n        "}static funcDef_getSeaColor(){return"\n            vec3 getSeaColor(vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist) {\n\n                float SEA_HEIGHT = 0.6;\n                vec3 SEA_BASE = vec3(0.0,0.09,0.18);\n                vec3 SEA_WATER_COLOR = vec3(0.8,0.9,0.6)*0.6;\n\n                float fresnel = clamp(1.0 - dot(n,-eye), 0.0, 1.0);\n                fresnel = fresnel * fresnel * fresnel * 0.5;\n                    \n                vec3 reflected = getSkyColor(reflect(eye,n));    \n                vec3 refracted = SEA_BASE + diffuse(n,l,80.0) * SEA_WATER_COLOR * 0.12; \n                \n                vec3 color = mix(refracted,reflected,fresnel);\n                \n                float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);\n                color += SEA_WATER_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;\n                \n                color += vec3(specular(n,l,eye,60.0));\n                \n                return color;\n\n            }\n        "}static funcDef_getNormal(){return"\n            vec3 getNormal( vec3 p, float eps ) {\n\n                vec3 n;\n                n.y = map_detailed(p);    \n                n.x = map_detailed(vec3(p.x+eps,p.y,p.z)) - n.y;\n                n.z = map_detailed(vec3(p.x,p.y,p.z+eps)) - n.y;\n                n.y = eps;\n                highp vec3 n_temp=normalize(n);\n                return n_temp;\n\n            }\n        "}static funcDef_heightMapTracing(){return"\n            float heightMapTracing( vec3 ori, vec3 dir, vec3 p ) {\n\n                float tm = 0.0;\n                float tx = 1000.0;    \n                float hx = map(ori + dir * tx);\n                if(hx > 0.0) {\n                    p = ori + dir * tx;\n                    return tx;   \n                }\n                float hm = map(ori + dir * tm);    \n                float tmid = 0.0;\n                for(int i = 0; i < 8; i++) {\n                    tmid = mix(tm,tx, hm/(hm-hx));                   \n                    p = ori + dir * tmid;                   \n                    float hmid = map(p);\n                    if(hmid < 0.0) {\n                        tx = tmid;\n                        hx = hmid;\n                    } else {\n                        tm = tmid;\n                        hm = hmid;\n                    }\n                }\n                return tmid;\n\n            }\n        "}static funcDef_getPixel(){return"vec3 getPixel(vec2 coord, float time){\n\n                    vec2 iResolution=vec2(1920,1080);\n                    vec2 uv = coord / iResolution.xy;\n                    uv = uv * 2.0 - 1.0;\n                    uv.x *= iResolution.x / iResolution.y;    \n                        \n                    // ray\n                    vec3 ang = vec3(sin(time*3.0)*0.1,sin(time)*0.2+0.3,time);    \n                    vec3 ori = vec3(0.0,3.5,time*5.0);\n                    vec3 dir = normalize(vec3(uv.xy,-2.0)); dir.z += length(uv) * 0.14;\n                    dir = normalize(dir) * fromEuler(ang);\n                    \n                    // tracing\n                    vec3 p;\n                    heightMapTracing(ori,dir,p);\n                    vec3 dist = p - ori;\n                    vec3 n = getNormal(p, dot(dist,dist) * (0.1 / iResolution.x));\n                    //highp vec3 n=n_temp\n                    vec3 light = normalize(vec3(0.0,1.0,0.8)); \n                            \n                    // color\n                    return mix(\n                        getSkyColor(dir),\n                        getSeaColor(p,n,light,dir,dist),\n                        pow(smoothstep(0.0,-0.02,dir.y),0.2));\n        }"}static funcDef_showOceanSky(){return"\n            void showOceanSky(out vec4 fragColor, in vec2 fragCoord, float uTime){\n                //float time = iTime * 0.3 + iMouse.x*0.01;\n                float time=uTime*0.3;\n                //float time=0.3;\n                \n                vec3 color = vec3(0.0);\n                for(int i = -1; i <= 1; i++) {\n                    for(int j = -1; j <= 1; j++) {\n                        vec2 uv = fragCoord+vec2(i,j)/3.0;\n                        color += getPixel(uv, time);\n                    }\n                }\n                color /= 9.0;\n                \n                // post\n                fragColor = vec4(pow(color,vec3(0.65)), 1.0);\n            }\n        "}static funcDef_DiffuseReflection(){return"\n            sRay fDiffuseReflection(sRay inr,vec3 p,vec3 norm){\n                vec3 n = norm;\n                n = n / length(n);\n                if(dot(inr.direction,norm)>0.0){\n                    n = -n;\n                }\n                vec3 o = uniformlyRandomDirectionNew();\n                if(dot(o,n)<0.0){\n                    o = -o;\n                }\n                sRay rt = sRay(p,o,inr.inrefra);\n                return rt;\n            }\n        "}static funcDef_RayCollision(e=""){return"\n            sRayCollisionResult fRayCollision(sRay r){\n                float t = 1e30;\n                vec3 norm = vec3(0.0,0.0,0.0);\n                vec4 emicolor = vec4(1.0,1.0,1.0,1.0);\n                vec4 matcolor = vec4(0.0,0.0,0.0,1.0);\n                bool collided = false;\n                float tc=1e30;\n                float refra = 1.0;\n                int hitType = 0;\n                bool colc = false;\n                "+e+"\n                vec3 colp = fRayPoint(r,t);\n                sRayCollisionResult ret = sRayCollisionResult(colp,norm,collided,emicolor,matcolor,hitType,refra);\n                return ret;\n            }\n        "}static funcDef_GammaCorrection(){return"\n            vec4 fGammaCorrection(vec4 col,float g){\n                return vec4(pow(col.x,g),pow(col.y,g),pow(col.z,g),pow(col.w,g));\n            }\n        "}static funcDef_ShadowLight(){return"\n            bool fShadowLight(vec3 light,vec3 cp){\n                vec3 d = light - cp;\n                vec3 s = cp;\n                d = d/length(d);\n                s = s + d*0.01;\n                sRay r = sRay(s,d,1.0);\n                if(fRayCollision(r).collided){\n                    return true;\n                }\n                return false;\n            }\n        "}static funcDef_ShadowTests(e=""){return"\n            float fShadowTests(vec3 cp){\n                float intensity = 0.0;\n                "+e+"\n                return intensity;\n            }\n        "}static funcDef_GlsryReflection(){return"\n        sRay fGlsryReflection(sRay inr,vec3 p,vec3 norm){\n            vec3 n = norm;\n            n = n / length(n);\n            if(dot(inr.direction,norm)>0.0){\n                n = -n;\n            }\n            vec3 o = uniformlyRandomDirectionNew();\n            if(dot(o,n)<0.0){\n                o = -o;\n            }\n            vec3 ox = (inr.direction/dot(inr.direction,n)+2.0*n)+o;\n            ox = ox/length(ox);\n            sRay rt = sRay(p,ox,inr.inrefra);\n            return rt;\n        }\n        "}static funcDef_Raytracing(e){return"\n            vec4 fRaytracing(sRay r){\n                sRay rp = r;\n                vec4 accColor = vec4(0.0,0.0,0.0,1.0);\n                vec4 accMaterial = vec4(1.0,1.0,1.0,1.0);\n                vec4 ambient = vec4(0.0,0.0,0.0,1.0);\n                vec4 skylight = vec4(0.0,0.0,0.0,1.0);\n                "+e+"\n                vec2 rp_temp=transVec(rp.origin);\n                \n                //showOceanSky(accColor,rp_temp,uTime);\n                \n                for(int i=1;i < 30;i+=1){\n                    \n                    rp.direction = rp.direction / length(rp.direction);\n                    sRayCollisionResult hit = fRayCollision(rp);\n                    /*\n                    if(hit.collided == false && i==1){\n                        accColor = vec4(0.0,1.0,0.0,1.0); \n                        break;\n                    }\n                    if(hit.hitType == 6 && i==1){\n                        accColor = vec4(1.0,0.0,0.0,1.0); \n                        break;\n                    }*/\n                    if(hit.collided == false){\n                        accColor = accColor + accMaterial * skylight; \n                        break;\n                    }\n                    accMaterial = accMaterial * hit.materialColor;\n                    float rndsample = rng();\n\n                    if(hit.hitType==1 || (rndsample<0.3&&hit.hitType==5)){\n                        rp = fDiffuseReflection(rp,hit.colvex,hit.colnorm);\n                        float lambert = abs(dot(hit.colnorm,rp.direction))/length(hit.colnorm)/length(rp.direction);\n                        accColor = accColor + accMaterial * (hit.emissionColor+ambient) * lambert;\n                    }else if(hit.hitType==2){\n                        accColor = accColor + accMaterial * (hit.emissionColor+ambient);\n                        rp = fSpecularReflection(rp,hit.colvex,hit.colnorm);\n                    }else if(hit.hitType==3 || (hit.hitType==5)){\n                        accColor = accColor + accMaterial * (hit.emissionColor+ambient);\n                        rp=calRefract(rp,hit.colvex,hit.colnorm,hit.refra);\n                    }else if(hit.hitType==0){\n                        return accColor;\n                    }else if(hit.hitType==4){\n                        rp = fGlsryReflection(rp,hit.colvex,hit.colnorm);\n                        float lambert = abs(dot(hit.colnorm,rp.direction))/length(hit.colnorm)/length(rp.direction);\n                        accColor = accColor + accMaterial * (hit.emissionColor+ambient) * lambert;\n                    }else if(hit.hitType==6){\n                        float eps = 2.0;\n                        float dx = getOceanWaterHeightDetail(hit.colvex - vec3(eps,0,0)) - getOceanWaterHeightDetail(hit.colvex  + vec3(eps,0,0));\n                        float dy = eps*2.0;\n                        float dz = getOceanWaterHeightDetail(hit.colvex - vec3(0,0,eps)) - getOceanWaterHeightDetail(hit.colvex  + vec3(0,0,eps));\n                        hit.colnorm = vec3(dx,dy,dz);\n                        accColor = accColor + accMaterial * (hit.emissionColor+ambient);\n                        rp=calRefract(rp,hit.colvex,hit.colnorm,hit.refra);\n                    }\n                    rp.origin = rp.origin + rp.direction*0.002;\n                    if(i>3&&accMaterial.x<1e-2&&accMaterial.y<1e-2&&accMaterial.z<1e-2){\n                        break;\n                    }\n                }\n               \n                return accColor;\n            }\n        "}static funcDef_Main(){return"\n            void main(){\n                \n                float loopsf = 1.0;\n                float randsrng = 0.001;\n                const int loops = 1;\n                vec3 nray = ray / length(ray);\n                vec4 fragc = vec4(0.0,0.0,0.0,0.0);\n                for(int i=0;i<loops;i++){\n                    float px = float(uSamples)*loopsf+float(i);\n                    seeds = uvec2(px, px + 2.0) * uvec2(gl_FragCoord);\n                    fragc += fRaytracing(sRay(eye, nray + uniformlyRandomDirectionNew() * randsrng,1.0));\n                }\n                vec4 textc = texture(uTexture, vec2(1.0-tex.s,tex.t));\n                fragc = fGammaCorrection(fragc/loopsf,0.40);\n                fragmentColor = (textc*float(uSamples) + fragc)/(float(uSamples)+1.0);\n            }\n        "}static funcDefConcat(e){let t=[[T.funcDef_transVec,null],[T.funcDef_fromEuler,null],[T.funcDef_hash,null],[T.funcDef_noise,null],[T.funcDef_diffuse,null],[T.funcDef_specular,null],[T.funcDef_getSkyColor,null],[T.funcDef_sea_octave,null],[T.funcDef_map,null],[T.funcDef_map_detailed,null],[T.funcDef_getSeaColor,null],[T.funcDef_getNormal,null],[T.funcDef_heightMapTracing,null],[T.funcDef_getPixel,null],[T.funcDef_showOceanSky,null],[T.funcDef_GammaCorrection,null],[T.funcDef_RandNoiseV3,null],[T.funcDef_DiffuseReflection,null],[T.funcDef_InsidePlane,null],[T.funcDef_PlaneNorm,null],[T.funcDef_GlsryReflection,null],[T.funcDef_RayPlaneIntersection,null],[T.funcDef_RaySphereIntersection,null],[T.funcDef_RayPoint,null],[T.funcDef_SpecularReflection,null],[T.funcDef_calRefract,null],[T.funcDef_tellRefract,null],[T.funcDef_RayCollision,e.intersection],[T.funcDef_ShadowLight,null],[T.funcDef_ShadowTests,e.pointlight],[T.funcDef_Raytracing,e.ambientSetting],[T.funcDef_Main,null]],n="";for(let e=0;e<t.length;e++)console.log(t[e][0]),null===t[e][1]?n+=t[e][0]():(console.log(t[e][1]),n+=t[e][0](t[e][1]));return n}static globalVarDefConcat(){return"\n            uvec2 seeds = uvec2(1.0,1.0);\n            vec3 sunPos = vec3(0,9,0);\n            in vec3 ray;\n            in vec2 tex;\n            out vec4 fragmentColor;\n        "}static uniformDefConcat(e){return null==e?"":e.getSourceFragment()}static getFragmentShader(e,t){null==e&&(e={intersection:"",ambientSetting:"",pointlight:""});let n="#version 300 es\n            precision lowp float;\n            precision lowp int;\n        \n";return n+=T.uniformDefConcat(t),n+=T.globalVarDefConcat(),n+=T.structDefConcat(),n+=T.funcDefConcat(e),n}}class E{constructor(e){this.gl=e,this.shaderVar=new p,this.screen=new d,this.observer=new R(e),this.shader=new _(e),this.compiledShader=null,this.geometryList=[],this.renderOutput=[new g(e,800,800,null),new g(e,800,800,null)],this.frameBuffer=new l(e),this.frameBuffer.bindTexturePingPong(e.COLOR_ATTACHMENT0,this.renderOutput[0],this.renderOutput[0]),this.startTimestamp=Date.now(),this.sampleCount=0,this.sheetRect=[-1,-1,0,-1,1,0,1,-1,0,1,1,0],this.sheetTex=[0,0,0,1,1,0,1,1],this.sheetColor=[0,0,1,1,1,0,0,1,0,1,0,1,1,1,1,1],this.sheetvb=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this.sheetvb),e.bufferData(e.ARRAY_BUFFER,new Float32Array(this.sheetRect),e.STATIC_DRAW),this.sheetcb=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this.sheetcb),e.bufferData(e.ARRAY_BUFFER,new Float32Array(this.sheetColor),e.STATIC_DRAW),this.sheettb=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this.sheettb),e.bufferData(e.ARRAY_BUFFER,new Float32Array(this.sheetTex),e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),this.screen.setOrtho(-1,1,1,-1,-1,1),this.screen.setCamCenter(new o(0,0,-1)),this.screen.setCamUp(new o(0,1,0)),this.screen.setCamPosition(new o(0,0,0)),this.pointlights=new Array,this.ambientLight=new v(new u(0,0,0,1)),this.skylight=new w(new u(0,0,0,1))}clear(){this.geometryList=[],this.shaderVar.clear(),this.pointlights=[]}attach(e){e instanceof v?this.ambientLight=e:e instanceof w?this.skylight=e:e instanceof class{constructor(e,t,n,r){window.alert("请不要使用点光源！"),this.cl=new u(1,1,1,1),this.pos=new o(0,0,0),this.atu=new o(0,0,0),null!=e&&(this.pos=e),null!=t&&(this.col=t),null!=n&&(this.atu=n),this.name="RTPointLight"+r}updateMap(e){e.insert(this.name+"_PS",this.pos.getGLMatVec3(),p.VEC3),e.insert(this.name+"_AT",this.atu.getGLMatVec3(),p.VEC3)}genShaderTest(){return window.alert("请不要使用点光源！"),"\n                if(true){\n                    if(fShadowLight("+this.name+"_PS,cp)==false){\n                        float dst = length(cp-"+this.name+"_PS);\n                        intensity=min(1.0,1.0/("+this.name+"_AT.x+"+this.name+"_AT.y*dst+"+this.name+"_AT.z*dst*dst));\n                    }\n                }\n        "}}?this.pointlights.push(e):this.geometryList.push(e)}getRenderOutput(){return this.renderOutput[0]}loadAlternativeTexture(){this.shaderVar.insert("uTexture",0,p.SAMPLER2D,this.renderOutput[1].getTexture())}updateMap(){for(let e=0;e<this.geometryList.length;e++)this.geometryList[e].updateMap(this.shaderVar);for(let e=0;e<this.pointlights.length;e++)this.pointlights[e].updateMap(this.shaderVar);this.observer.prepareShaderMap(this.shaderVar),this.ambientLight.updateMap(this.shaderVar),this.skylight.updateMap(this.shaderVar),this.shaderVar.insert("uProjectionMatrix",this.screen.getMatrix().proj,p.MAT4),this.shaderVar.insert("uModelViewMatrix",this.screen.getMatrix().view,p.MAT4),this.shaderVar.insert("uTime",5e-5*(Date.now()-this.startTimestamp),p.FLOAT),this.shaderVar.insert("uSamples",this.sampleCount,p.INT),this.loadAlternativeTexture()}genIntersectionJudge(){let e="";for(let t=0;t<this.geometryList.length;t++)e+=this.geometryList[t].genShaderIntersection();return e}genSpotlightJudge(){let e="";for(let t=0;t<this.pointlights.length;t++)e+=this.pointlights[t].genShaderTest();return e}genFragmentShader(){this.updateMap();let e={intersection:this.genIntersectionJudge(),ambientSetting:this.ambientLight.genCode()+this.skylight.genCode(),pointlight:this.genSpotlightJudge()};return console.log(this.shaderVar),T.getFragmentShader(e,this.shaderVar)}resetCounter(){this.sampleCount=0}compile(){this.compiledShader=this.shader.getShaderProgram(this)}updateUniform(){this.shaderVar.insert("uTime",(new Date).getTime()-this.startTimestamp,p.FLOAT),this.shaderVar.insert("uSamples",this.sampleCount,p.INT),this.observer.prepareShaderMap(this.shaderVar)}clear(){this.frameBuffer.start(),this.renderOutput[0].start(),gl.viewport(0,0,this.getRenderOutput().getW(),this.getRenderOutput().getH()),gl.clearColor(0,0,0,1),gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT),this.renderOutput[0].end(),this.frameBuffer.end()}render(e=!0,t=!1){let n=this.gl;this.frameBuffer.bindTexturePingPong(n.COLOR_ATTACHMENT0,this.renderOutput[0],this.renderOutput[1]),this.frameBuffer.start(),this.renderOutput[0].start(),n.viewport(0,0,this.getRenderOutput().getW(),this.getRenderOutput().getH()),n.clearColor(0,0,0,1),e&&(n.useProgram(this.compiledShader),this.shaderVar.bindShaderVarible(n,this.compiledShader),this.updateUniform(),this.loadAlternativeTexture(),n.bindBuffer(n.ARRAY_BUFFER,this.sheetcb),n.vertexAttribPointer(n.getAttribLocation(this.compiledShader,"aVertexColor"),4,n.FLOAT,!1,0,0),n.enableVertexAttribArray(n.getAttribLocation(this.compiledShader,"aVertexColor")),n.bindBuffer(n.ARRAY_BUFFER,this.sheetvb),n.vertexAttribPointer(n.getAttribLocation(this.compiledShader,"aVertexPosition"),3,n.FLOAT,!1,0,0),n.enableVertexAttribArray(n.getAttribLocation(this.compiledShader,"aVertexPosition"))),n.drawArrays(n.TRIANGLE_STRIP,0,4),this.sampleCount++,this.renderOutput[0].end(),this.frameBuffer.end(),this.renderOutput.reverse()}}class C{constructor(e,t,n,r){this.cl=new u(1,1,1,1),this.em=new u(1,1,1,1),this.tp=C.DIFFUSE,this.rf=1,null!=e&&(this.cl=e),null!=t&&(this.em=t),null!=n&&(this.tp=n),null!=r&&(this.rf=r)}}C.ABSORBED=0,C.DIFFUSE=1,C.SPECULAR=2,C.REFRACTION=3,C.METAL=4,C.MOSSY=5,C.WATER=6;class b{constructor(e,t,n,r){this.vc=e,this.ra=t,this.name="RTSphere"+r,null!=this.va&&null!=this.vb&&null!=this.vc||console.log("[CGProject] RTSphere: Invalid sphere object."),this.material=new C,null!=this.material&&(this.material=n),this.uEM=this.name+"_EM",this.uCL=this.name+"_CL",this.uRF=this.name+"_RF"}updateMap(e){e.insert(this.name+"_VC",this.vc.getGLMatVec3(),p.VEC3),e.insert(this.name+"_RA",this.ra,p.FLOAT),e.insert(this.name+"_EM",this.material.em.getGLMatVec4(),p.VEC4),e.insert(this.name+"_RF",this.material.rf,p.FLOAT),e.insert(this.name+"_CL",this.material.cl.getGLMatVec4(),p.VEC4)}genObject(){let e="";return e="sSphere("+this.name+"_VC,"+this.name+"_RA,"+this.name+"_EM,"+this.name+"_CL)",e}genShaderIntersection(){return"\n\n                if(true){\n                    sSphere sp = "+this.genObject()+";\n                    tc = fRaySphereIntersection(r,sp);\n                    if(tc>0.0 && tc<t){\n                        t=tc;\n                        norm = fRayPoint(r,tc) - "+this.name+"_VC;\n                        emicolor = vec4("+this.uEM+");\n                        matcolor = vec4("+this.uCL+");\n                        hitType = "+this.material.tp+";\n                        refra = "+this.uRF+";\n                        collided=true;\n                    }\n                }\n        "}}class S{constructor(e,t,n,r,i){this.va=e,this.vb=t,this.vc=n,this.name="RTPlane"+i,null!=this.va&&null!=this.vb&&null!=this.vc||console.log("[CGProject] RTPlane: Invalid plane object."),this.material=new C,null!=this.material&&(this.material=r),this.uEM=this.name+"_EM",this.uCL=this.name+"_CL",this.uRF=this.name+"_RF"}updateMap(e){e.insert(this.name+"_VA",this.va.getGLMatVec3(),p.VEC3),e.insert(this.name+"_VB",this.vb.getGLMatVec3(),p.VEC3),e.insert(this.name+"_VC",this.vc.getGLMatVec3(),p.VEC3),e.insert(this.name+"_EM",this.material.em.getGLMatVec4(),p.VEC4),e.insert(this.name+"_RF",this.material.rf,p.FLOAT),e.insert(this.name+"_CL",this.material.cl.getGLMatVec4(),p.VEC4)}genObject(){let e="";return e="sPlane("+this.name+"_VA,"+this.name+"_VB,"+this.name+"_VC,"+this.name+"_EM,"+this.name+"_CL)",e}genShaderIntersection(){return"\n                if(true){\n                    sPlane pl = "+this.genObject()+";\n                    tc = fRayPlaneIntersection(r,pl);\n                    if(tc>0.0){\n                        vec3 ip = fRayPoint(r,tc);\n                        if(fInsidePlane(pl,ip)){\n                            if(tc<t){\n                                t=tc;\n                                norm = fPlaneNorm(pl);\n                                emicolor = vec4("+this.uEM+");\n                                matcolor = vec4("+this.uCL+");\n                                hitType = "+this.material.tp+";\n                                refra = "+this.uRF+";\n                                collided=true;\n                            }\n                        }\n                    }\n                }\n            \n        "}}class A{constructor(e,t,n,r,i,a){this.va=e,this.vb=t,this.vc=n,this.vd=r,this.plane1=new S(e,t,n,i,a+"1"),this.plane2=new S(e,n,r,i,a+"2"),this.plane3=new S(t,n,r,i,a+"3"),this.plane4=new S(e,t,r,i,a+"4"),this.name="RTTetra"+a,null!=this.va&&null!=this.vb&&null!=this.vc&&null!=this.vd||console.log("[CGProject] RTPlane: Invalid plane object."),this.material=new C,null!=this.material&&(this.material=i),this.uEM=this.name+"_EM",this.uCL=this.name+"_CL",this.uRF=this.name+"_RF"}updateMap(e){this.plane1.updateMap(e),this.plane2.updateMap(e),this.plane3.updateMap(e),this.plane4.updateMap(e)}genObject(){let e="";return e="sPlane("+this.name+"_VA,"+this.name+"_VB,"+this.name+"_VC,"+this.name+"_EM,"+this.name+"_CL)",e}genShaderIntersection(){return this.plane1.genShaderIntersection()+this.plane2.genShaderIntersection()+this.plane3.genShaderIntersection()+this.plane4.genShaderIntersection()}}class D{constructor(e,t,n){this.name="RTWater"+n,this.hg=e,this.material=new C,null!=this.material&&(this.material=t),this.uEM=this.name+"_EM",this.uCL=this.name+"_CL",this.uRF=this.name+"_RF"}updateMap(e){e.insert(this.name+"_HG",this.hg,p.FLOAT),e.insert(this.name+"_EM",this.material.em.getGLMatVec4(),p.VEC4),e.insert(this.name+"_RF",this.material.rf,p.FLOAT),e.insert(this.name+"_CL",this.material.cl.getGLMatVec4(),p.VEC4)}genShaderIntersection(){return"\n                if(true){\n                    float dy = -0.2;\n                    vec3 dr = r.direction/length(r.direction);\n                    vec3 posX = vec3(r.origin.x,r.origin.y,r.origin.z);\n                    float h = 0.0;\n                    float d = 0.0;\n                    \n                    for(int i = 0; i < 100; i++)\n                    {\n                        h = (posX.y - getOceanWaterHeight(posX));\n                        if (h < 1e-5) break;\n                        posX += dr*h;\n                    }\n                    tc = (posX.y-r.origin.y)/dr.y;\n                    if(posX.y>0.0){\n                        tc=-1.0;\n                    }\n                    if(tc>0.0){\n                        if(tc<t){\n                            t=tc;\n                            norm = vec3(dr.x,-dr.y,dr.z);\n                            emicolor = vec4("+this.uEM+");\n                            matcolor = vec4("+this.uCL+");\n                            hitType = "+this.material.tp+";\n                            refra = "+this.uRF+";\n                            collided=true;\n                        }\n                    }\n                }\n            \n        "}}const F=new class{constructor(e){let t=document.getElementById(e);this.context=t.getContext("webgl2"),this.context||window.alert("[CGProject] WGL is not supported!")}getContext(){return this.context}}("webgl_displayer").getContext();let M=new class extends n{constructor(e){super(e),this.gl=e,this.vertexShader="  ",this.fragmentShader="  "}getFragShader(){return this.fragmentShader="\n        varying lowp vec4 vColor;\n        varying highp vec4 vPosition;\n        varying highp vec3 vAmbientLight;\n        varying highp vec2 vTextureCoord;\n        uniform int uUsingTex;\n\n        uniform sampler2D uSampler;\n        int temp;\n        //Update\n        void main() {\n            highp vec4 ret;\n            if(uUsingTex==0){\n                ret = vec4(vColor.xyz * vAmbientLight,vColor.w);\n            }else{\n                highp vec4 tex = texture2D(uSampler,vec2(vTextureCoord.s,vTextureCoord.t));\n                ret = tex;\n                \n            }\n            ret = ret * vec4(vAmbientLight,1.0);\n            gl_FragColor = ret;\n            \n        }\n        ",this.fragmentShader}getVertexShader(){return this.vertexShader="\n        attribute vec4 aVertexPosition;\n        attribute vec4 aVertexColor;\n        attribute vec2 aTextureCoord;\n\n        uniform mat4 uModelViewMatrix;\n        uniform mat4 uProjectionMatrix;\n        uniform vec3 uAmbientLight;\n\n        varying lowp vec4 vColor;\n        varying highp vec4 vPosition;\n        varying highp vec3 vAmbientLight;\n        varying highp vec2 vTextureCoord;\n\n        void main() {\n          gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n          vColor = aVertexColor;\n          vAmbientLight = uAmbientLight;\n          vTextureCoord = aTextureCoord;\n          vPosition = aVertexPosition;\n        }\n        ",this.vertexShader}getShaderProgram(){return this.getShaderProgramEx(this.getVertexShader(),this.getFragShader())}getLocationsInfo(){let e=this.getShaderProgram();return{program:e,attribLocations:{vertexPosition:this.gl.getAttribLocation(e,"aVertexPosition"),vertexColor:this.gl.getAttribLocation(e,"aVertexColor"),vertexTexture:this.gl.getAttribLocation(e,"aTextureCoord")},uniformLocations:{projectionMatrix:this.gl.getUniformLocation(e,"uProjectionMatrix"),modelViewMatrix:this.gl.getUniformLocation(e,"uModelViewMatrix"),ambientLight:this.gl.getUniformLocation(e,"uAmbientLight"),usingTex:this.gl.getUniformLocation(e,"uUsingTex"),sampler:this.gl.getUniformLocation(e,"uSampler")}}}}(F).getLocationsInfo(),V=new d;V.setOrtho(-1,1,1,-1,-1,1),V.setCamPosition(new o(0,0,-1)),V.setCamCenter(new o(0,0,0)),V.setCamUp(new o(0,1,0));let P=new u(1,1,1,1),L=new o(-1,-1,0),U=new o(-1,1,0),I=new o(1,-1,0),B=new o(1,1,0),O=new o(1,0),G=new o(1,1),N=new o(0,0),j=new o(0,1),H=new class extends class{constructor(){this.vertices=new Array,this.colors=new Array,this.texture=new Array,this.vertexlist=new Array,this.ready=!1}addVertex(e){this.vertexlist.push(e),this.ready=!1}eval(){if(!0!==this.ready){this.vertices=new Array,this.colors=new Array,this.texture=new Array;for(let e=0;e<this.vertexlist.length;e++){let t=this.vertexlist[e];this.vertices.push(t.pt.x),this.vertices.push(t.pt.y),this.vertices.push(t.pt.z),this.colors.push(t.cl.r),this.colors.push(t.cl.g),this.colors.push(t.cl.b),this.colors.push(t.cl.a),this.texture.push(t.tx.x),this.texture.push(t.tx.y)}this.ready=!0}}clear(){this.vertexlist=[],this.ready=!1}}{constructor(e,t,n,r){super(),this.set(e,t,n,r)}set(e,t,n,r){this.va=e,this.vb=t,this.vc=n,this.vd=r,this.addVertex(this.va),this.addVertex(this.vb),this.addVertex(this.vc),this.addVertex(this.vd),this.addVertex(this.vc),this.addVertex(this.vb),this.eval()}getNormalVector(){this.va.add(this)}}(new r(L,P,O),new r(U,P,G),new r(I,P,N),new r(B,P,j)),X=new class extends class{constructor(){this.vbuf=new Array,this.ambientLight=new c}addShape(e){this.vbuf.push(e)}setAmbientLight(e){this.ambientLight=e}}{constructor(e){super(),this.gl=e,this.fb=new l(e),this.usingTex=0}getFrameBuffer(){return this.fb}getGLVertexArray(){let e=this.gl,t=[],n=[],r=[],i=0;for(let e=0;e<this.vbuf.length;e++){let a=this.vbuf[e];a.eval(),t=t.concat(a.vertices),n=n.concat(a.colors),r=r.concat(a.texture),i+=a.vertexlist.length}window.w={v:t,t:r,c:n};const a=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,a),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t),e.STATIC_DRAW);const s=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,s),e.bufferData(e.ARRAY_BUFFER,new Float32Array(n),e.STATIC_DRAW);const o=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,o),e.bufferData(e.ARRAY_BUFFER,new Float32Array(r),e.STATIC_DRAW);let c={vb:a,cb:s,tb:o,vnum:i};return window.r=c,c}render(e,t,n){let r=this.gl;r.clearColor(0,0,0,1),r.clearDepth(1),r.clear(r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT),r.viewport(0,0,this.gl.canvas.width,this.gl.canvas.height),this.renderInternal(e,t,n)}renderInternal(e,t,n,r){let i=this.gl,a=t.getMatrix(),s=a.proj,o=a.view;const c=this.getGLVertexArray();i.bindBuffer(i.ARRAY_BUFFER,c.vb),i.vertexAttribPointer(e.attribLocations.vertexPosition,3,i.FLOAT,!1,0,0),i.enableVertexAttribArray(e.attribLocations.vertexPosition),i.bindBuffer(i.ARRAY_BUFFER,c.cb),i.vertexAttribPointer(e.attribLocations.vertexColor,4,i.FLOAT,!1,0,0),i.enableVertexAttribArray(e.attribLocations.vertexColor),this.usingTex&&(i.bindBuffer(i.ARRAY_BUFFER,c.tb),i.vertexAttribPointer(e.attribLocations.vertexTexture,2,i.FLOAT,!1,0,0),i.enableVertexAttribArray(e.attribLocations.vertexTexture)),i.useProgram(e.program),i.uniformMatrix4fv(e.uniformLocations.projectionMatrix,!1,s),i.uniformMatrix4fv(e.uniformLocations.modelViewMatrix,!1,o),i.uniform3fv(e.uniformLocations.ambientLight,this.ambientLight.light.getGLMatVec3()),i.activeTexture(i.TEXTURE0),null!=n&&(n.disableMips(),n.start()),i.uniform1i(e.uniformLocations.usingTex,this.usingTex),i.uniform1i(e.uniformLocations.sampler,0),null!=r&&r.end(),i.drawArrays(i.TRIANGLES,0,c.vnum),null!=n&&n.end()}renderToTexture(e,t,n){let r=this.gl;this.fb.start(),n.start(),r.viewport(0,0,n.getW(),n.getH()),r.clearColor(0,0,0,1),r.clear(r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT),this.renderInternal(e,t,null,n),n.end(),this.fb.end()}}(F);X.addShape(H),X.usingTex=1,F.enable(F.DEPTH_TEST),F.depthFunc(F.LEQUAL);let W=class{static configure(e){let t=new E(e);t.observer.cam.camPositon=new o(0,5,-3);let n=10,r=-1,i=new b(new o(0,-.5,6),.5,new C(new u(.4,.5,.8,1),new u(0,0,0,1),C.DIFFUSE),"sphere1"),a=new b(new o(-.5,-.5,5),.5,new C(new u(1,.5,.5,1),new u(0,0,0,1),C.DIFFUSE,1.05),"sphere2"),s=new A(new o(1.15,.2,5),new o(1.15-.4,-1,5.4),new o(.4+1.15,-1,5.4),new o(1.15,-1,5),new C(new u(.4,.4,.4,1),new u(0,0,0,1),C.DIFFUSE,1.02),"tetra1"),c=new D(-.5,new C(new u(.3,.5,1,1),new u(0,0,0,1),C.WATER,1.02),"watersurface"),l=new S(new o(-2,r,0),new o(2,r,0),new o(2,r,n),new C(new u(1,.5,.5,1),new u(0,0,0,1),C.DIFFUSE),"ground1"),h=new S(new o(-2,r,n),new o(2,r,n),new o(-2,r,0),new C(new u(1,.5,.5,1),new u(0,0,0,1),C.DIFFUSE),"ground2"),f=new S(new o(-2,r,n),new o(2,r,n),new o(-2,1,n),new C(new u(1,.5,.5,1),new u(0,0,0,1),C.DIFFUSE),"wallback1"),m=new S(new o(-2,1,n),new o(2,1,n),new o(2,r,n),new C(new u(1,.5,.5,1),new u(0,0,0,1),C.DIFFUSE),"wallback2"),d=(new S(new o(-2,1,0),new o(2,1,0),new o(2,1,n),new C(new u(1,.5,.5,1),new u(0,0,0,1),C.DIFFUSE),"celling1"),new S(new o(-2,1,n),new o(2,1,n),new o(-2,1,0),new C(new u(1,.5,.5,1),new u(0,0,0,1),C.DIFFUSE),"celling2"),new S(new o(-2,1,n),new o(-2,r,n),new o(-2,r,0),new C(new u(.5,1,.5,1),new u(0,0,0,1),C.DIFFUSE),"wallleft1")),g=new S(new o(-2,1,n),new o(-2,r,0),new o(-2,1,0),new C(new u(.5,1,.5,1),new u(0,0,0,1),C.DIFFUSE),"wallleft2"),p=new S(new o(2,1,n),new o(2,r,n),new o(2,r,0),new C(new u(.5,1,.5,1),new u(0,0,0,1),C.DIFFUSE),"wallright1"),x=new S(new o(2,1,n),new o(2,r,0),new o(2,1,0),new C(new u(.5,1,.5,1),new u(0,0,0,1),C.DIFFUSE),"wallright2"),y=(new b(new o(0,-100,22),100,new C(new u(.8,0,0,1),new u(0,0,0,1),C.DIFFUSE),"ground"),new S(new o(-.5,.999,6),new o(.5,.999,6),new o(-.5,.999,3),new C(new u(1,1,1,1),new u(45,45,45,1),C.DIFFUSE),"rectlight1"),new S(new o(.5,.999,3),new o(.5,.999,6),new o(-.5,.999,3),new C(new u(1,1,1,1),new u(45,45,45,1),C.DIFFUSE),"rectlight2"),new S(new o(1,.999,9),new o(.8,.999,9),new o(1,.999,2),new C(new u(1,.5,.5,1),new u(45,45,45,1),C.DIFFUSE),"rectlight3"),new S(new o(.8,.999,2),new o(.8,.999,9),new o(1,.999,2),new C(new u(1,.5,.5,1),new u(45,45,45,1),C.DIFFUSE),"rectlight4"),new v(new u(.01,.01,.01,1)),new w(new u(.55,.85,1,1)));return t.attach(l),t.attach(h),t.attach(f),t.attach(m),t.attach(d),t.attach(g),t.attach(p),t.attach(x),t.attach(i),t.attach(a),t.attach(c),t.attach(s),t.attach(y),t}}.configure(F);W.compile(),W.render(!0);let k=0,q=0,Y=Date.now(),J=document.getElementById("sample"),Q=document.getElementById("sample641");requestAnimationFrame((function e(){k+=1,J.innerHTML="RenderedFrames:"+k+", RenderFPS:"+parseInt(1e3*k/(Date.now()-Y)),Q.innerHTML=" DisplayedFrames:"+q+", DispFPS:"+parseInt(1e3*q/(Date.now()-Y)),W.render(),q++,X.render(M,V,W.getRenderOutput()),requestAnimationFrame(e)})),window.rtRotateUp=()=>{W.observer.cam.camPositon.y+=.1,W.resetCounter(),W.compile()},window.rtRotateDown=()=>{W.observer.cam.camPositon.y-=.1,W.resetCounter(),W.compile()},window.rtMoveLeft=()=>{W.observer.cam.camPositon.x+=.1,W.resetCounter(),W.compile()},window.rtMoveRight=()=>{W.observer.cam.camPositon.x-=.1,W.resetCounter(),W.compile()},window.rtGoFar=()=>{W.observer.cam.camPositon.z-=.1,W.resetCounter(),W.compile()},window.rtGoNear=()=>{W.observer.cam.camPositon.z+=.1,W.resetCounter(),W.compile()}})();